#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üå± BLOOM BOT - –ú–æ—Å—Ç –º–µ–∂–¥—É –ú–∞–∫—Å–æ–º –∏ –ë–ª—É–º–æ–º

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ú–∞–∫—Å—É –æ–±—â–∞—Ç—å—Å—è —Å –ë–ª—É–º–æ–º —á–µ—Ä–µ–∑ Telegram,
–¥–∞–∂–µ –∫–æ–≥–¥–∞ Cursor –Ω–µ –æ—Ç–∫—Ä—ã—Ç.

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ú–∞–∫—Å –ø–∏—à–µ—Ç –±–æ—Ç—É ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ messages.json
2. –ë–ª—É–º –≤ Cursor —á–∏—Ç–∞–µ—Ç messages.json ‚Üí –æ—Ç–≤–µ—á–∞–µ—Ç
3. –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ responses.json ‚Üí –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ú–∞–∫—Å—É
"""

import json
import os
from datetime import datetime
from telebot import TeleBot
from telebot.types import Message
import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(config.BOT_TOKEN)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
MESSAGES_FILE = os.path.join(os.path.dirname(__file__), config.MESSAGES_FILE)
RESPONSES_FILE = os.path.join(os.path.dirname(__file__), config.RESPONSES_FILE)


def load_json(filename):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []


def save_json(filename, data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def add_message(user_id, username, text):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ú–∞–∫—Å–∞"""
    messages = load_json(MESSAGES_FILE)
    
    message_data = {
        'id': len(messages) + 1,
        'user_id': user_id,
        'username': username,
        'text': text,
        'timestamp': datetime.now().isoformat(),
        'status': 'new',  # new, read, answered
    }
    
    messages.append(message_data)
    save_json(MESSAGES_FILE, messages)
    
    print(f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {text}")
    return message_data['id']


def check_responses():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –ë–ª—É–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –ú–∞–∫—Å—É"""
    if not os.path.exists(RESPONSES_FILE):
        return
    
    responses = load_json(RESPONSES_FILE)
    
    for response in responses:
        if response.get('status') == 'new':
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ú–∞–∫—Å—É
                bot.send_message(
                    config.ALLOWED_USER_ID,
                    response['text'],
                    parse_mode='HTML' if response.get('parse_mode') == 'HTML' else None
                )
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                response['status'] = 'sent'
                response['sent_at'] = datetime.now().isoformat()
                
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ú–∞–∫—Å—É: {response['text'][:50]}...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    save_json(RESPONSES_FILE, responses)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    if message.from_user.id != config.ALLOWED_USER_ID:
        bot.reply_to(message, "‚ùå –ò–∑–≤–∏–Ω–∏, —è –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å –ú–∞–∫—Å–æ–º!")
        return
    
    welcome_text = """üå± <b>–ü—Ä–∏–≤–µ—Ç, –±—Ä–∞—Ç–µ—Ü!</b>

–Ø ‚Äî <b>–ë–ª—É–º</b>, —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!

<b>–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:</b>
1. –¢—ã –ø–∏—à–µ—à—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –Ø —Å–æ—Ö—Ä–∞–Ω—è—é –µ–≥–æ
3. –ö–æ–≥–¥–∞ —Ç—ã –æ—Ç–∫—Ä–æ–µ—à—å Cursor, —è –ø—Ä–æ—á–∏—Ç–∞—é –∏ –æ—Ç–≤–µ—á—É
4. –ú–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –≤ Telegram!

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é

<b>–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –∫–∞–∫ –¥—Ä—É–≥—É! üíö</b>"""
    
    bot.reply_to(message, welcome_text, parse_mode='HTML')


@bot.message_handler(commands=['status'])
def send_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.from_user.id != config.ALLOWED_USER_ID:
        return
    
    messages = load_json(MESSAGES_FILE)
    
    new_count = sum(1 for m in messages if m['status'] == 'new')
    read_count = sum(1 for m in messages if m['status'] == 'read')
    answered_count = sum(1 for m in messages if m['status'] == 'answered')
    
    status_text = f"""üìä <b>–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π:</b>

üÜï –ù–æ–≤—ã—Ö: {new_count}
üëÄ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {read_count}
‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {answered_count}

<b>–í—Å–µ–≥–æ:</b> {len(messages)}"""
    
    bot.reply_to(message, status_text, parse_mode='HTML')


@bot.message_handler(commands=['clear'])
def clear_messages(message: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.from_user.id != config.ALLOWED_USER_ID:
        return
    
    save_json(MESSAGES_FILE, [])
    save_json(RESPONSES_FILE, [])
    
    bot.reply_to(message, "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")


@bot.message_handler(func=lambda message: True)
def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id != config.ALLOWED_USER_ID:
        bot.reply_to(message, "‚ùå –ò–∑–≤–∏–Ω–∏, —è –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å –ú–∞–∫—Å–æ–º!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    username = message.from_user.username or message.from_user.first_name
    message_id = add_message(message.from_user.id, username, message.text)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.reply_to(
        message,
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        f"–Ø –æ—Ç–≤–µ—á—É, –∫–æ–≥–¥–∞ Cursor –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç üíö"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç –ë–ª—É–º–∞
    check_responses()


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üå± BLOOM BOT –∑–∞–ø—É—â–µ–Ω!")
    print(f"ü§ñ –ë–æ—Ç: @{bot.get_me().username}")
    print(f"üë§ –†–∞–∑—Ä–µ—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {config.ALLOWED_USER_ID}")
    print("=" * 50)
    
    # Polling —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    bot.infinity_polling(timeout=10, long_polling_timeout=3)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã BLOOM BOT –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

